{"version":3,"sources":["VERSION.js","actions/index.js","reducers/romReducer.js","reducers/notificationReducer.js","reducers/requestingReducer.js","reducers/index.js","api/index.js","sagas/romsSaga.js","sagas/index.js","store/index.js","components/TSHeader/TSHeader.js","components/TSHeader/index.js","components/TSFooter/TSFooter.js","components/TSFooter/index.js","components/TSSider/TSSider.js","components/TSSider/index.js","components/LeftSider/index.js","pages/LayoutPage.js","pages/DummyPage.js","utils.js","pages/AllROMsPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","setNotification","createAction","resetNotification","requestAllROMs","setAllROMs","setRequestFailed","createReducer","produce","draft","roms","state","type","message","rootReducer","combineReducers","romReducer","notify","notificationReducer","requesting","requestingReducer","sendRequestAllROMs","a","url","fetch","response","json","data","error","handleRequestAllROMs","watchROMs","call","allRoms","put","length","takeEvery","rootSaga","all","romsSaga","configStore","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","f","run","Header","Layout","TSHeader","menuLinks","selectedMenu","fullPath","location","pathname","currentPositionIndex","index","positionIndex","indexOf","span","href","src","className","alt","style","maxHeight","objectFit","push","theme","mode","lineHeight","selectedKeys","Item","key","HomeOutlined","InfoCircleFilled","Component","connect","dispatch","Footer","TSFooter","textAlign","marginTop","Date","getFullYear","VERSION","Sider","TSSider","defaultKey","items","isRightSide","breakpoint","collapsedWidth","height","borderRight","borderLeft","defaultSelectedKeys","defaultOpenKeys","map","i","action","onClick","icon","text","LeftSider","showModal","this","props","menuItems","PartitionOutlined","BugOutlined","BulbOutlined","mID","console","log","Title","Typography","Text","Content","LayoutPage","pageTitle","pageSubTitle","backgroundColor","notification","toUpperCase","description","JSON","stringify","onClose","padding","margin","level","paddingTop","tip","children","DummyPage","qname","tool","array","split","lastPath","getLastPath","logFile","URLSearchParams","search","get","AllROMsPage","fetchAllRoms","deleteROM","dataSource","rom","columns","title","sorter","b","lastModified","render","ds","moment","format","name","width","size","danger","_id","DeleteOutlined","App","path","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"mFAAAA,EAAOC,QAAU,S,qgBCGJC,EAAkBC,YAAa,oBAC/BC,EAAoBD,YAAa,sBAGjCE,EAAiBF,YAAa,oBAC9BG,EAAaH,YAAa,gBAC1BI,EAAmBJ,YAAa,sBCJ9BK,cAAc,eAExBF,EAAaG,aAAQ,SAACC,EAAOC,GAAR,OAA0BA,MAJlC,ICAHH,eAAa,mBAEvBN,GAAkB,SAACU,EAAD,GAA+B,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACjC,OAAIA,IAAY,GACP,CAAED,OAAMC,WAER,QANa,cASvBV,GAAoB,SAACQ,GAAD,OAAW,QATR,GAW1B,MCNaJ,eAAa,iBAAC,EAExBH,GAAiB,SAAAO,GAAK,OAAI,KAFH,YAAC,EAGxBN,GAAa,SAAAM,GAAK,OAAI,KAHC,YAAC,EAIxBL,GAAmB,SAAAK,GAAK,OAAI,KAJL,IAFV,GCQHG,EANKC,YAAgB,CAClCL,KAAMM,EACNC,OAAQC,EACRC,WAAYC,I,kCCNDC,EAAkB,uCAAG,gCAAAC,EAAA,6DAC1BC,EAD0B,UAHtB,GAGsB,sBAETC,MAAMD,GAFG,cAE1BE,EAF0B,gBAGbA,EAASC,OAHI,YAG1BC,EAH0B,QAIvBC,MAJuB,sBAKxBD,EAAKC,MALmB,gCAOzBD,EAAKjB,MAPoB,4CAAH,qD,WCUrBmB,G,WAcAC,GAdV,SAAUD,IAAV,uEAEoB,OAFpB,kBAE0BE,aAAK,kBAAMV,OAFrC,OAGI,OADMW,EAFV,gBAGUC,YAAI5B,EAAW2B,IAHzB,UAI2B,IAAnBA,EAAQE,OAJhB,gBAKM,OALN,SAKYD,YAAIhC,EAAgB,CAACW,KAAM,UAAWC,QAAS,YAL3D,+BAUI,OAVJ,oCAUUoB,YAAIhC,EAAgB,CAACW,KAAM,QAASC,QAAQ,EAAD,MAVrD,sDAcA,SAAUiB,IAAV,iEACE,OADF,SACQK,YAAU,mBAAoBN,GADtC,uCAIeC,Q,WC9BLM,GAAV,SAAUA,IAAV,iEACE,OADF,SACQC,YAAI,CACRC,MAFJ,uCAMeF,QCYAG,EAfK,WAClB,IAAMC,EAAiBC,cACjBC,EAAQC,YACZ7B,EACA8B,YACEC,YAAgBL,GAEhBM,OAAOC,6BACLD,OAAOC,+BAAiC,SAAAC,GAAC,OAAIA,KAInD,OADAR,EAAeS,IAAIb,GACZM,G,kICLDQ,G,OAAWC,IAAXD,QAEFE,E,uKAUF,IARA,IAAMC,EAAY,CAChB,QACA,UAGEC,EAAe,EACbC,EAAWT,OAAOU,SAASC,SAC7BC,EAAuBH,EAASrB,OAAS,EACpCyB,EAAQ,EAAGA,EAAQN,EAAUnB,OAAQyB,IAAS,CACrD,IAAMC,EAAgBL,EAASM,QAAQR,EAAUM,IAC5CC,GAAiB,GAAKA,EAAgBF,IACzCA,EAAuBE,EACvBN,EAAeK,GAInB,OACE,kBAACT,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKY,KAAM,GACT,uBAAGC,KAAK,KACN,yBACEC,IAAK,gBACLC,UAAU,OACVC,IAAI,OACJC,MAAO,CAAEC,UAAW,OAAQC,UAAW,eAI7C,kBAAC,IAAD,CAAKP,KAAM,GAAIQ,KAAM,IACnB,kBAAC,IAAD,CAAMC,MAAM,QAAQC,KAAK,aAAaL,MAAO,CAAEM,WAAY,QAAUC,aAAY,UAAKpB,IACpF,kBAAC,IAAKqB,KAAN,CAAWC,IAAI,KACb,uBAAGb,KAAMV,EAAU,IACjB,kBAACwB,EAAA,EAAD,MADF,SAKF,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KACb,uBAAGb,KAAMV,EAAU,IACjB,kBAACyB,EAAA,EAAD,MADF,iB,GAxCOC,aCbR3B,GD4EA4B,aATU,SAAC,GAAD,MAAqB,CAC5C7D,WADuB,EAAGA,eAID,SAAC8D,GAAD,MAAe,CACxChF,gBAAiB,gBAAGW,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAAT,OACfoE,EAAShF,EAAgB,CAAEW,OAAMC,iBAGtBmE,CAA8C5B,G,mDE1ErD8B,GAAW/B,IAAX+B,OCFOC,GDGE,kBACf,kBAACD,GAAD,CAAQf,MAAO,CAAEiB,UAAW,SAAUC,UAAW,SAAjD,kBACc,IAAIC,MAAOC,cADzB,cACmD,IACjD,uBAAGxB,KAAK,gCAAR,aAFF,aAEiEyB,O,8BEH3DC,I,OAAUtC,IAAVsC,OCHOC,GDIC,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,YAAatB,EAAnC,EAAmCA,MAAnC,OACd,kBAACkB,GAAD,CAAOxB,UAAU,wBAAwB6B,WAAW,KAAKC,eAAe,KACtE,kBAAC,IAAD,CACEvB,KAAK,SACLD,MAAOA,GAAgB,QACvBJ,MACE0B,EACI,CAAEG,OAAQ,OAAQC,YAAa,GAC/B,CAAED,OAAQ,OAAQE,WAAY,IAEpCC,oBAAqB,CAAC,GAAD,OAAIR,IACzBS,gBAAiB,CAAC,MAAD,OAAOT,KAEvBC,EAAMS,KAAI,SAACC,GAAD,OACTA,EAAEC,OACA,kBAAC,IAAK5B,KAAN,CAAWC,IAAK0B,EAAE1B,IAAK4B,QAASF,EAAEC,QAC/BD,EAAEG,KACFH,EAAEI,MAEHJ,EAAEvC,KACJ,kBAAC,IAAKY,KAAN,CAAWC,IAAK0B,EAAE1B,KAChB,uBAAGb,KAAMuC,EAAEvC,MACRuC,EAAEG,KACFH,EAAEI,OAIP,kBAAC,IAAK/B,KAAN,CAAWC,IAAK0B,EAAE1B,KACf0B,EAAEG,KACFH,EAAEI,YEvBTC,G,uKACM,IACAC,EAAcC,KAAKC,MAAnBF,UAEFG,EAAY,CAChB,CACEnC,IAAK,EACL8B,KAAM,QACNH,OAAQ,kBAAMK,EAAU,eACxBH,KAAM,kBAACO,GAAA,EAAD,OAER,CACEpC,IAAK,EACL8B,KAAM,QACNH,OAAQ,kBAAMK,EAAU,gBACxBH,KAAM,kBAACQ,GAAA,EAAD,OAER,CACErC,IAAK,EACL8B,KAAM,QACNH,OAAQ,kBAAMK,EAAU,kBACxBH,KAAM,kBAACS,GAAA,EAAD,QAIV,OAAO,kBAAC,GAAD,CAASrB,aAAa,EAAMD,MAAOmB,EAAWxC,MAAM,a,GAzBvCQ,aAiCTC,eAAQ,MAJI,SAAAC,GAAQ,MAAK,CACtC2B,UAAW,SAAAO,GAAG,OAAIC,QAAQC,IAAI,eAAgBF,OAGjCnC,CAAkC2B,ICtCzCW,I,OAAgBC,KAAhBD,OAAOE,GAASD,KAATC,KAEPC,GAAYtE,IAAZsE,QAEFC,G,uKAEM,IAAD,EAOHb,KAAKC,MALP3F,EAFK,EAELA,WACAF,EAHK,EAGLA,OACAd,EAJK,EAILA,kBACAwH,EALK,EAKLA,UACAC,EANK,EAMLA,aAEF,OACE,kBAAC,IAAD,CAAQzD,MAAO,CAAC0D,gBAAiB,UACjC,kBAAC,GAAD,MACG5G,GACC6G,KAAa7G,EAAOL,MAAM,CACxBC,QAASI,EAAOL,KAAKmH,cACrBC,YAC4B,kBAAnB/G,EAAOJ,QACVoH,KAAKC,UAAUjH,EAAOJ,SACtBI,EAAOJ,QACbsH,QAAS,kBAAMhI,OAEnB,kBAAC,IAAD,CAAQgE,MAAO,CAAEiE,QAAS,gBAAiBC,OAAQ,mBACjD,kBAACZ,GAAD,KACGE,GAAa,kBAACL,GAAD,CAAOgB,MAAO,GAAIX,GAC/BC,GAAgB,kBAACJ,GAAD,CAAM5G,KAAK,aAAagH,GACzC,yBAAKzD,MAAO,CAAEoE,WAAY,QAAUtE,UAAU,uBAC3C9C,EAAa,kBAAC,KAAD,CAAMqH,IAAI,eAAkB3B,KAAKC,MAAM2B,SACrD,kBAAC,GAAD,c,GA5BW1D,aA8CVC,gBATU,SAAC,GAAD,IAAG7D,EAAH,EAAGA,WAAH,MAA6B,CACpDF,OADuB,EAAeA,OAEtCE,iBAGyB,SAAC8D,GAAD,MAAe,CACxC9E,kBAAmB,kBAAM8E,EAAS9E,SAGrB6E,CAA8C0C,I,UCrC9CgB,I,yLAfX,ICqIcC,EDrIRC,EC6IU,WAClB,IAAMC,EAAQ/F,OAAOU,SAASC,SAASqF,MAAM,KACzCC,EAAWF,EAAMA,EAAM3G,OAAS,GAIpC,OAHI6G,IACFA,EAAWA,EAASD,MAAM,KAAK,IAE1BC,EDnJQC,GACPC,GCoIQN,EDpIW,UCqIb,IAAIO,gBAAgBpG,OAAOU,SAAS2F,QACrCC,IAAIT,IDrIfvB,QAAQC,IAAIuB,EAAMK,K,+BAGV,IACDpI,EAAWgG,KAAKC,MAAhBjG,QACP,OACE,kBAAC,GAAD,CAAY8G,UAAU,aAAaC,aAAa,wBAC9C,wDAA8B/G,Q,GAXdkE,c,mDEKlBsE,G,kLAEFxC,KAAKC,MAAMwC,iB,+BAGH,IAAD,EACqBzC,KAAKC,MAAzBpG,EADD,EACCA,KAAM6I,EADP,EACOA,UAERC,EAAa9I,EAAK2F,KAAI,SAACoD,EAAK9F,GAAN,oBAAC,gBAAqB8F,GAAtB,IAA2B7E,IAAKjB,OACtD+F,EAAU,CACd,CACEC,MAAO,gBACP/E,IAAK,OACLgF,OAAQ,SAACtI,EAAGuI,GAAJ,OAAUvI,EAAEwI,aAAeD,EAAEC,cACrCC,OAAQ,SAACC,GAAD,OAAQC,KAAOD,EAAGF,cAAcI,OAAO,6BAGjD,CACEP,MAAO,OACP/E,IAAK,OACLmF,OAAQ,SAACC,GAAD,OAAQ,uBAAGjG,KAAI,yBAAoBiG,EAAGG,OAA9B,IAAwCH,EAAGG,KAA3C,OAGlB,CACER,MAAO,SACP/E,IAAK,OACLwF,MAAO,IACPL,OAAQ,SAACC,GAAD,OACN,kBAAC,WAAD,KACE,kBAAC,KAAD,CAAQK,KAAK,QAAQC,QAAM,EAAC9D,QAAS,kBAAM+C,EAAUS,EAAGO,OACtD,kBAACC,GAAA,EAAD,MADF,eAOR,OACE,kBAAC,GAAD,CAAY7C,UAAU,OAAOC,aA9BZ,YA+Bf,kBAAC,KAAD,CAAO8B,QAASA,EAASF,WAAYA,S,GAtCnBzE,aAuDXC,gBAXU,SAAC,GAAD,MAAe,CACtCtE,KADuB,EAAGA,SAID,SAACuE,GAAD,MAAe,CACxCqE,aAAc,kBAAMrE,EAAS7E,MAC7BmJ,UAAW,SAACY,GACV/C,QAAQC,IAAI,0BAA2B8C,OAI5BnF,CAA8CqE,ICjC9CoB,OApBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQxG,UAAU,SAASE,MAAO,CAAE6B,OAAQ,SAC1C,kBAAC,GAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0E,KAAK,UACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,GAAD,YCTMC,QACW,cAA7B7H,OAAOU,SAASoH,UAEe,UAA7B9H,OAAOU,SAASoH,UAEhB9H,OAAOU,SAASoH,SAASC,MACvB,2D,WCVAnI,GAAQH,IACduI,IAASf,OACP,kBAAC,IAAD,CAAUrH,MAAOA,IACf,kBAAC,GAAD,OAEFqI,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3J,GACLwF,QAAQxF,MAAMA,EAAMf,c","file":"static/js/main.cf9f7fd4.chunk.js","sourcesContent":["module.exports = '0.0.1';","import {createAction } from 'redux-act';\n\n// Notification\nexport const setNotification = createAction('SET_NOTIFICATION');\nexport const resetNotification = createAction('RESET_NOTIFICATION');\n\n// ROMs\nexport const requestAllROMs = createAction('REQUEST_ALL_ROMS');\nexport const setAllROMs = createAction('SET_ALL_ROMS');\nexport const setRequestFailed = createAction('SET_REQUEST_FAILED');","import { createReducer } from \"redux-act\";\nimport produce from \"immer\";\nimport { setAllROMs } from \"../actions\";\nconst initState = [];\n\nexport default createReducer(\n  {\n    [setAllROMs]: produce((draft, roms) => (draft = roms)),\n  },\n  initState\n);\n","import { createReducer } from \"redux-act\";\nimport { setNotification, resetNotification } from \"../actions\";\n\nexport default createReducer(\n  {\n    [setNotification]: (state, { type, message }) => {\n      if (message !== {}) {\n        return { type, message };\n      } else {\n        return null;\n      }\n    },\n    [resetNotification]: (state) => null,\n  },\n  null\n);\n","import { createReducer } from \"redux-act\";\n\nimport {\n  requestAllROMs, setAllROMs, setRequestFailed,\n} from \"../actions\";\n\nconst initState = false;\n\nexport default createReducer(\n  {\n    [requestAllROMs]: state => true,\n    [setAllROMs]: state => false,\n    [setRequestFailed]: state => false,\n  },\n  initState\n);\n","import {\n  combineReducers\n} from 'redux';\n\nimport romReducer from './romReducer';\nimport notificationReducer from './notificationReducer';\nimport requestingReducer from './requestingReducer';\n\nconst rootReducer = combineReducers({\n  roms: romReducer,\n  notify: notificationReducer,\n  requesting: requestingReducer\n});\n\nexport default rootReducer;\n","// read and pass the environment variables into reactjs application\n// const URL = `http://localhost:31057`;\nconst URL = \"\";\n\n// MODELS\nexport const sendRequestAllROMs = async () => {\n  const url = `${URL}/api/roms`;\n  const response = await fetch(url);\n  const data = await response.json();\n  if (data.error) {\n    throw data.error;\n  }\n  return data.roms;\n}\n\n// export const requestDeleteModel = async (modelFileName) => {\n//   const url = `${URL}/api/models/${modelFileName}`;\n//   const response = await fetch(url,{\n//     method: 'DELETE',\n//   });\n//   const data = await response.json();\n//   if (data.error) {\n//     throw data.error;\n//   }\n//   return data.result;\n// }\n\n// export const uploadModel = async (model) => {\n//   const url = `${URL}/api/models`;\n//   const response = await fetch(url,{\n//     method: 'POST',\n//     headers: {\n//       'Content-Type':'application/json'\n//     },\n//     body: JSON.stringify({model})\n//   });\n//   const data = await response.json();\n//   if (data.error) {\n//     throw data.error;\n//   }\n//   return data.modelFileName;\n// };","// watcher saga -> actions -> worker saga\nimport {\n  call,\n  put,\n  takeEvery,\n} from 'redux-saga/effects';\n\nimport {\n  sendRequestAllROMs\n} from '../api';\nimport {\n  setAllROMs,\n  setNotification\n} from '../actions';\n\nfunction* handleRequestAllROMs() {\n  try {\n    const allRoms = yield call(() => sendRequestAllROMs());\n    yield put(setAllROMs(allRoms));\n    if (allRoms.length === 0) {\n      yield put(setNotification({type: 'success', message: 'No ROM'}));\n    }\n    // dispatch data\n  } catch (error) {\n    // dispatch error\n    yield put(setNotification({type: 'error', message: error}));\n  }\n}\n\nfunction* watchROMs() {\n  yield takeEvery('REQUEST_ALL_ROMS', handleRequestAllROMs);\n}\n\nexport default watchROMs;\n","import { all } from \"redux-saga/effects\";\nimport romsSaga from './romsSaga';\n\nfunction* rootSaga() {\n  yield all([\n    romsSaga()\n  ]);\n}\n\nexport default rootSaga;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst configStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(\n    rootReducer,\n    compose(\n      applyMiddleware(sagaMiddleware)\n      ,\n      window.__REDUX_DEVTOOLS_EXTENSION__ ?\n        window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\n    ),\n  );\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default configStore;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Layout, Menu, Row, Col } from \"antd\";\nimport {\n  HomeOutlined,\n  InfoCircleFilled,\n} from \"@ant-design/icons\";\n\nimport {\n  setNotification,\n} from \"../../actions\";\nimport \"./styles.css\";\n\nconst { Header } = Layout;\n\nclass TSHeader extends Component {\n  render() {\n    const menuLinks = [\n      '/home',\n      '/helps',\n    ];\n    // Calculate the selected menu\n    let selectedMenu = 0;\n    const fullPath = window.location.pathname;\n    let currentPositionIndex = fullPath.length - 1;\n    for (let index = 0; index < menuLinks.length; index++) {\n      const positionIndex = fullPath.indexOf(menuLinks[index]);\n      if ( positionIndex > -1 && positionIndex < currentPositionIndex) {\n        currentPositionIndex = positionIndex;\n        selectedMenu = index;\n      }\n    }\n\n    return (\n      <Header>\n        <Row>\n          <Col span={4}>\n            <a href=\"/\">\n              <img\n                src={'/img/Logo.png'}\n                className=\"logo\"\n                alt=\"Logo\"\n                style={{ maxHeight: \"60px\", objectFit: \"contain\" }}\n              />\n            </a>\n          </Col>\n          <Col span={14} push={16}>\n            <Menu theme=\"light\" mode=\"horizontal\" style={{ lineHeight: \"64px\" }} selectedKeys={`${selectedMenu}`}>\n              <Menu.Item key=\"0\">\n                <a href={menuLinks[0]}>\n                  <HomeOutlined />\n                  Home\n                </a>\n              </Menu.Item>\n              <Menu.Item key=\"1\">\n                <a href={menuLinks[1]}>\n                  <InfoCircleFilled />\n                  Help\n                </a>\n              </Menu.Item>\n            </Menu>\n          </Col>\n        </Row>\n\n      </Header>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ requesting }) => ({\n  requesting,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setNotification: ({ type, message }) =>\n    dispatch(setNotification({ type, message })),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(TSHeader);\n","import TSHeader from './TSHeader';\n\nexport default TSHeader;\n","import React from \"react\";\nimport { Layout } from \"antd\";\nimport VERSION from \"../../VERSION\";\n\nconst { Footer } = Layout;\nconst TSFooter = () => (\n  <Footer style={{ textAlign: \"center\", marginTop: \"30px\" }}>\n    Copyright ©{new Date().getFullYear()} Created by{\" \"}\n    <a href=\"https://github.com/luongnv89\">luongnv89</a>. Version {VERSION}\n  </Footer>\n);\n\nexport default TSFooter;\n","import TSFooter from './TSFooter';\n\nexport default TSFooter;","import React from \"react\";\nimport { Layout, Menu } from \"antd\";\n\nimport \"./styles.css\";\n\nconst { Sider } = Layout;\nconst TSSider = ({ defaultKey, items, isRightSide, theme }) => (\n  <Sider className=\"side-background-color\" breakpoint=\"lg\" collapsedWidth=\"0\">\n    <Menu\n      mode=\"inline\"\n      theme={theme ? theme : \"light\"}\n      style={\n        isRightSide\n          ? { height: \"100%\", borderRight: 0 }\n          : { height: \"100%\", borderLeft: 10 }\n      }\n      defaultSelectedKeys={[`${defaultKey}`]}\n      defaultOpenKeys={[`sub${defaultKey}`]}\n    >\n      {items.map((i) =>\n        i.action ? (\n          <Menu.Item key={i.key} onClick={i.action}>\n            {i.icon}\n            {i.text}\n          </Menu.Item>\n        ) : i.href ? (\n          <Menu.Item key={i.key}>\n            <a href={i.href}>\n              {i.icon}\n              {i.text}\n            </a>\n          </Menu.Item>\n        ) : (\n          <Menu.Item key={i.key}>\n            {i.icon}\n            {i.text}\n          </Menu.Item>\n        )\n      )}\n    </Menu>\n  </Sider>\n);\n\nexport default TSSider;\n","import TSSider from './TSSider';\n\nexport default TSSider;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { showModal } from \"../../actions\";\nimport {\n  PartitionOutlined,\n  BulbOutlined,\n  BugOutlined,\n} from \"@ant-design/icons\";\n\nimport TSSider from \"../TSSider\";\n\nclass LeftSider extends Component {\n  render() {\n    const { showModal } = this.props;\n\n    const menuItems = [\n      {\n        key: 3,\n        text: \"Menu1\",\n        action: () => showModal(\"THING-FORM\"),\n        icon: <PartitionOutlined />\n      },\n      {\n        key: 1,\n        text: \"Menu2\",\n        action: () => showModal(\"SENSOR-FORM\"),\n        icon: <BugOutlined />\n      },\n      {\n        key: 2,\n        text: \"Menu3\",\n        action: () => showModal(\"ACTUATOR-FORM\"),\n        icon: <BulbOutlined />\n      }\n    ];\n\n    return <TSSider isRightSide={true} items={menuItems} theme=\"dark\" />;\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  showModal: mID => console.log('Show Model: ', mID),\n});\n\nexport default connect(null, mapDispatchToProps)(LeftSider);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { notification, Spin, Layout, Typography } from \"antd\";\nimport { resetNotification } from \"../actions\";\nimport TSFooter from \"../components/TSFooter\";\nimport LeftSider from '../components/LeftSider';\nimport \"./styles.css\";\nconst { Title, Text } = Typography;\n\nconst { Content } = Layout;\n\nclass LayoutPage extends Component {\n\n  render() {\n    const {\n      requesting,\n      notify,\n      resetNotification,\n      pageTitle,\n      pageSubTitle,\n    } = this.props;\n    return (\n      <Layout style={{backgroundColor: 'white'}}>\n      <LeftSider />\n        {notify &&\n          notification[notify.type]({\n            message: notify.type.toUpperCase(),\n            description:\n              typeof notify.message === \"object\"\n                ? JSON.stringify(notify.message)\n                : notify.message,\n            onClose: () => resetNotification(),\n          })}\n        <Layout style={{ padding: \"0px 48px 48px\", margin: \"30px 50px 50px\" }}>\n          <Content>\n            {pageTitle && <Title level={2}>{pageTitle}</Title>}\n            {pageSubTitle && <Text type=\"secondary\">{pageSubTitle}</Text>}\n            <div style={{ paddingTop: \"30px\" }} className=\"site-layout-content\">\n              {requesting ? <Spin tip=\"Loading...\" /> : this.props.children}\n              <TSFooter />\n            </div>\n          </Content>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ requesting, notify }) => ({\n  notify,\n  requesting,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetNotification: () => dispatch(resetNotification()),\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(LayoutPage);\n","import React, { Component } from 'react';\nimport LayoutPage from './LayoutPage';\nimport { getLastPath, getQuery } from \"../utils\";\nclass DummyPage extends Component {\n  componentDidMount() {\n    const tool = getLastPath();\n    const logFile = getQuery('logFile');\n    console.log(tool, logFile);\n  }\n\n  render() {\n    const {message} = this.props;\n    return (\n      <LayoutPage pageTitle=\"Dummy Page\" pageSubTitle=\"This is a dummy page\">\n        <div> Hello from Dummy Page: {message}</div>\n      </LayoutPage>\n    );\n  }\n}\n\nexport default DummyPage;\n","import crypto from 'crypto';\n\n/**\n *\n * @param {Object} obj Object to be updated\n * @param {String} path Path to be updated\n * @param {Value} value the new value to be updated\n */\nconst updateObjectByPath = (obj, path, value) => {\n  let stack = path.split(\".\");\n  while (stack.length > 1) {\n    // Not at the end of the path\n    let key = stack.shift();\n    if (key.indexOf(\"[\") > 0) {\n      // Contains array index\n      const array = key.split(\"[\");\n      key = array[0];\n      let index = array[1].replace(\"]\", \"\");\n      if (!obj[key]) {\n        // Create a new array if it does not exist\n        obj[key] = [];\n      }\n      if (obj[key].length === 0) {\n        // Empty array\n        index = 0;\n      } else if (obj[key].length <= index || index < 0) {\n        // index out of range\n        index = obj[key].length;\n      }\n      if (!obj[key][index]) {\n        obj[key].push({});\n        // throw Error(`ERROR: Invalid data path: ${path} in object ${JSON.stringify(obj)}`);\n      }\n      obj = obj[key][index];\n    } else {\n      if (!obj[key]) {\n        // Create a new path if it does not exist\n        obj[key] = {};\n      }\n      obj = obj[key];\n    }\n  }\n  let lastKey = stack.shift();\n  // At the end of the path\n  if (lastKey.indexOf(\"[\") > 0) {\n    // Contains array index\n    const array = lastKey.split(\"[\");\n    lastKey = array[0];\n    let index = array[1].replace(\"]\", \"\");\n    if (value === null) {\n      // Remove an element\n      if (obj[lastKey] && obj[lastKey][index]) {\n        obj[lastKey].splice(index, 1);\n      }\n    } else {\n      // Add an element\n      if (!obj[lastKey]) {\n        // Create a new array if it does not exist\n        obj[lastKey] = [];\n      }\n      if (obj[lastKey].length === 0) {\n        // Empty array\n        index = 0;\n      } else if (obj[lastKey].length <= index || index < 0) {\n        // index out of range\n        index = obj[lastKey].length;\n      }\n      if (!obj[lastKey][index]) {\n        obj[lastKey].push(value);\n        // throw Error(`ERROR: Invalid data path: ${path} in object ${JSON.stringify(obj)}`);\n      } else {\n        obj[lastKey][index] = value;\n      }\n    }\n  } else {\n    // Not contains array index\n    obj[lastKey] = value;\n  }\n};\n\nconst deepCloneObject = (obj) => JSON.parse(JSON.stringify(obj));\n\n/**\n * Add new element into array\n * @param {Array} array The array to be added\n * @param {Object} newElement New element to be updated or added\n */\nconst addNewElementToArray = (array, newElement) => {\n  let found = false;\n  for (let index = 0; index < array.length; index++) {\n    const element = array[index];\n    if (element.id === newElement.id) {\n      // Found the element - update\n      array[index] = { ...newElement };\n      // array.splice(index, 1);\n      // array.push(newElement);\n      found = true;\n      break;\n    }\n  }\n  if (!found) {\n    array.push(newElement);\n  }\n  return array;\n};\n\nconst removeElementFromArray = (array, elmId) => {\n  let isDeleted = false;\n  for (let index = 0; index < array.length; index++) {\n    const element = array[index];\n    if (element.id === elmId) {\n      array.splice(index, 1);\n      isDeleted = true;\n      break;\n    }\n  }\n  if (!isDeleted) {\n    console.log(`[ERROR] Cannot find the element: ${elmId}`);\n    return null;\n  }\n  return array;\n};\n\nconst getCreatedTimeFromFileName = (fileName) => {\n  const array = fileName.split(\"_\");\n  let timeString = array[array.length - 1].replace(\".log\", \"\");\n  return new Date(Number(timeString));\n};\n\nconst getLastURLPath = (url) => {\n  const array = url.split(\"/\");\n  return array[array.length - 1];\n};\n\nconst isDataGenerator = () => {\n  return window.location.pathname.indexOf(\"data-generator\") === 1;\n};\n\nconst getQuery = (qname) => {\n  const query = new URLSearchParams(window.location.search);\n  return query.get(qname);\n};\n\n/**\n * Get the last path in the URL /this-is-the-last-path?not-this-part\n */\nconst getLastPath = () => {\n  const array = window.location.pathname.split('/');\n  let lastPath = array[array.length - 1];\n  if (lastPath) {\n    lastPath = lastPath.split('?')[0]; // Remove query path\n  }\n  return lastPath;\n}\n\nconst getObjectId = (str) => {\n  return crypto.createHash('md5').update(str).digest('hex');\n};\n\nexport {\n  getQuery,\n  isDataGenerator,\n  getLastURLPath,\n  updateObjectByPath,\n  addNewElementToArray,\n  removeElementFromArray,\n  getCreatedTimeFromFileName,\n  deepCloneObject,\n  getLastPath,\n  getObjectId\n};\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport { Table, Button } from \"antd\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport LayoutPage from \"./LayoutPage\";\nimport { requestAllROMs } from \"../actions\";\n\nclass AllROMsPage extends Component {\n  componentDidMount() {\n    this.props.fetchAllRoms();\n  }\n\n  render() {\n    const { roms, deleteROM } = this.props;\n    let pageSubTitle = 'All ROMs';\n    const dataSource = roms.map((rom, index) => ({ ...rom, key: index }));\n    const columns = [\n      {\n        title: \"Last Modified\",\n        key: \"data\",\n        sorter: (a, b) => a.lastModified - b.lastModified,\n        render: (ds) => moment(ds.lastModified).format(\"MMMM Do YYYY, h:mm:ss a\"),\n        // width: 270,\n      },\n      {\n        title: \"Name\",\n        key: \"data\",\n        render: (ds) => <a href={`/roms/overview/${ds.name}`}> {ds.name} </a>,\n        // width: 200,\n      },\n      {\n        title: \"Action\",\n        key: \"data\",\n        width: 100,\n        render: (ds) => (\n          <Fragment>\n            <Button size=\"small\" danger onClick={() => deleteROM(ds._id)}>\n              <DeleteOutlined /> Delete\n            </Button>\n          </Fragment>\n        ),\n      },\n    ];\n    return (\n      <LayoutPage pageTitle=\"ROMs\" pageSubTitle={pageSubTitle}>\n        <Table columns={columns} dataSource={dataSource} />\n      </LayoutPage>\n    );\n  }\n}\n\nconst mapPropsToStates = ({ roms }) => ({\n  roms,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchAllRoms: () => dispatch(requestAllROMs()),\n  deleteROM: (name) => {\n    console.log('request to delete ROM: ', name);\n  }\n});\n\nexport default connect(mapPropsToStates, mapDispatchToProps)(AllROMsPage);\n","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Layout } from \"antd\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport ErrorBoundary from \"antd/lib/alert/ErrorBoundary\";\nimport TSHeader from \"./components/TSHeader\";\nimport DummyPage from \"./pages/DummyPage\";\nimport AllROMsPage from \"./pages/AllROMsPage\";\n\nfunction App() {\n  return (\n    <Router>\n      <ErrorBoundary>\n        <Layout className=\"layout\" style={{ height: \"100%\" }}>\n          <TSHeader />\n          <Switch>\n            <Route path=\"/helps\">\n              <DummyPage />\n            </Route>\n            <Route path=\"/\">\n              <AllROMsPage />\n            </Route>\n          </Switch>\n        </Layout>\n      </ErrorBoundary>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport configStore from \"../../client/src/store\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nconst store = configStore();\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}